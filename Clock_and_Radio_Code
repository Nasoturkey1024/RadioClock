# toDo
# test encoder
# figure out how to work speaker for alarm purposes
# implement clock volume/alarm sound
# implement alarm functionallity
# Rework OLED
# create functions for display_hour, display_minute, display_am/pm
from machine import Pin, I2C, Timer, SPI
from ssd1306 import SSD1306_SPI
import time

# Buttons for clock functionality

enter_save_time = machine.Pin(0, machine.Pin.IN, machine.Pin.PULL_UP) # implemented
switch_time_12and24 = machine.Pin(1, machine.Pin.IN, machine.Pin.PULL_UP) # implemented
enter_save_alarm = machine.Pin(2, machine.Pin.IN, machine.Pin.PULL_UP) # implemented
turn_alarm_off_on = machine.Pin(3, machine.Pin.IN, machine.Pin.PULL_UP) # implemented

# Universal buttons 
value_increase = machine.Pin(4, machine.Pin.IN, machine.Pin.PULL_UP) # implemented, finish clock volume
value_decrease = machine.Pin(6, machine.Pin.IN, machine.Pin.PULL_UP) # implemented, finish clock volume
switch_display = machine.Pin(7, machine.Pin.IN, machine.Pin.PULL_UP) # button implemented

# Radio button/dial
radio_on_off = machine.Pin(8, machine.Pin.IN, machine.Pin.PULL_UP) # implemented, needs testing
dial_button = machine.Pin(13, machine.Pin.IN, machine.Pin.PULL_UP)
rotaryA = machine.Pin(15, machine.Pin.IN, machine.Pin.PULL_UP)
rotaryB = machine.Pin(14, machine.Pin.IN, machine.Pin.PULL_UP)

# mode decides what the universal increament/decreament do as well as display
mode = 1
# timer for use with debouncing
tim = machine.Timer()
clock_tim = machine.Timer()
# timer for use with clock
past_A = rotaryA.value()
past_B = rotaryB.value()

screen_width = 128 # number of columns
screen_height = 64 # number of rows

spi_sck = Pin(18)
spi_sda = Pin(19)
spi_res = Pin(21)
spi_dc  = Pin(20)
spi_cs  = Pin(17)

SPI_DEVICE = 0
oled_spi = SPI( SPI_DEVICE, baudrate= 100000, sck= spi_sck, mosi= spi_sda )
oled = SSD1306_SPI( screen_width, screen_height, oled_spi, spi_dc, spi_res, spi_cs, True )

display_clock_hour = 0
display_alarm_hour = 0
display_time_half = ""
display_alarm_half = ""


# used when displaying 
def set_display_clock_hour():
    if clock.hour == 0:
        display_clock_hour = 12
        display_time_half = "am"
    elif clock.hour < 12:
        display_clock_hour = clock.hour
        display_time_half = "am"
    elif clock.hour == 12:
        display_clock_hour = 12
        display_time_half = "pm"
    else:
        display_clock_hour = clock.hour - 12
        display_time_half = "pm"
def set_alarm_hour():
    if clock.alarm_hour == 0:
        display_alarm_hour = 12
        display_alarm_half = "am"
    elif clock.alarm_hour < 12:
        display_alarm_hour = clock.alarm_hour
        display_alarm_half = "am"
    elif clock.alarm_hour == 12:
        display_alarm_hour = 12
        display_alarm_half = "pm"
    else:
        display_alarm_hour = clock.alarm_hour - 12
        display_alarm_half = "pm"

# use this to change mode and implement changes that result from change
def change_mode(t):
    if t > 6 or t < 1:
        t = 1
    if t == 1: # clock mode
        mode = 1
    elif t == 2: # edit clock hour mode
        mode = 2
    elif t == 3: # edit clock minute mode
        mode = 3
    elif t == 4: # edit alarm hour mode
        mode = 4
    elif t == 5: # edit alarm minute mode
        mode = 5
    else: # radio mode
        mode = 6
# increament value of volume/number depending on current mode
def switch_clock_radio_display():
    if switch_display.value() == 0:
        if mode == 6:
            change_mode(1)
        else:
            change_mode(6)
# goes from hour->minute alarm edit
def enter_alarm_edit():
    if enter_save_alarm.value() == 0:
        if mode == 4:
            change_mode(5) # enter alarm minute
        elif mode == 5:
            change_mode(1) # exit alarm edit
        else:
            change_mode(4) # enter alarm hour
def toggle_alarm():
    if turn_alarm_off_on.value() == 0:
        clock.toggle_alarm()
def increament():
    if increament.value() == 0:
        if mode == 1: # clock mode, 
            clock.increament_volume()
        elif mode == 2: # edit clock hour
            clock.increament_hour()
        elif mode == 3: # edit clock minute
            clock.increament_minute()
        elif mode == 4: # edit alarm hour
            clock.increament_alarm_hour()
        elif mode == 5: # edit alarm minute
            clock.increament_alarm_minute(1)
        else:
            Settings = fm_radio.GetSettings()
            Volume = Settings[1] + 1
            if(Volume == 16):
                Volume = 15
            if ( fm_radio.SetVolume( Volume ) == True ):
                fm_radio.ProgramRadio()
       
# decreament value of volume/number depending on current mode 
def decreament():
    if value_decrease.value() == 0:
        if mode == 1:# clock mode
            clock.decreament_volume()
        elif mode == 2: # edit clock hour
            clock.decreament_hour()
        elif mode == 3: # edit clock minute
            clock.decreament_minute()
        elif mode == 4: # edit alarm hour
            clock.decreament_alarm_hour()
        elif mode == 5: # edit alarm minute
            clock.decreament_alarm_minute()
        else: # radio mode
            Settings = fm_radio.GetSettings()
            Volume = Settings[1] - 1
            if(Volume < 0):
                Volume = 0
            if ( fm_radio.SetVolume( Volume ) == True ):
                fm_radio.ProgramRadio()

def enter_save():
    if enter_save_time.value() == 0:
        if mode == 2:
            change_mode(3)
        elif mode == 3:
            change_mode(1)
        else:
            change_mode(2)
            
def switch_display_time():
    if switch_time_12and24.value() == 0:
        if clock.display == 0:
            clock.display = 1
        else:
            clock.display

def turn_radio_off_on():
    if radio_on_off.value == 0:
        if fm_radio.Mute == False:
            fm_radio.SetMute(True)
            fm_radio.ProgramRadio()
        else:
            fm_radio.SetMute(False)
            fm_radio.ProgramRadio()

# function to increase/decrease frequency of radio based on rotation of rotary encoder
def increase_place_holder():
    fm_radio.increase_place_holder()
def decrease_place_holder():
    fm_radio.decrease_place_holder()
def change_in_encoder():
    if past_A == 0 and past_B == 0:
        if rotaryA.value() == 1:
            past_A = 1
            increase_place_holder()
        else:
            past_B = 1
            decrease_place_holder()
    elif past_A == 1 and past_B == 0:
        if rotaryB.value() == 1:
            past_B = 1
            increase_place_holder()
        else:
            past_A = 0
            decrease_place_holder()
    elif past_A == 0 and past_B == 1:
        if rotaryB.value() == 0:
            past_B = 0
            increase_place_holder()
        else:
            past_A = 1
            decrease_place_holder()
    else:
        if rotaryA.value() == 0:
            past_A = 0
            increase_place_holder()
        else:
            past_B = 0
            decrease_place_holder()

# function to set new frequency, also snooze due to mistake
def set_new_frequency():
    if dial_button.value == 0:
        if clock.alarm_ringing == True:
            clock.snooze()
        else:
            fm_radio.set_place_holder()
def increase_timer(t):
    clock.increase_minute()

# debounces universal increament
def increament_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=increament)
# debounces universal decreament
def decreament_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=decreament)
# debounces enter/save time for clock
def enter_save_time_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=enter_save)

# debounces for all clock buttons
def switch_time_12and24_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=clock.change_display)
def switch_display_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=switch_clock_radio_display)
def enter_alarm_edit_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=enter_alarm_edit)
def toggle_alarm_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=toggle_alarm)

def toggle_radio_off_on_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=turn_radio_off_on)
def dial_button_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=set_new_frequency)
def rotary_debounce(t):
    tim.init(freq=200, mode=Timer.ONE_SHOT, callback=change_in_encoder)
# interrupt handlers for all clock buttons
value_increase.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=increament_debounce)
value_decrease.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=decreament_debounce)
enter_save_time.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=enter_save_time_debounce)
switch_time_12and24.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=switch_time_12and24_debounce)
switch_display.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=switch_display_debounce)
enter_save_alarm.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=enter_alarm_edit_debounce)
turn_alarm_off_on.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=toggle_alarm_debounce)
# interrupt handler for radio buttons/encoders
radio_on_off.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=toggle_radio_off_on_debounce)
dial_button.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=dial_button_debounce)
rotaryA.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=rotary_debounce)
rotaryB.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=rotary_debounce)

class Clock:
    
    def __init__(self):
        
        self.hour = 0 # current hour 
        self.minute = 0 # current minute
        self.display = False # sets clock as 12 hour time by default

        self.alarm_hour = 7
        self.alarm_minute = 30
        self.alarm_volume = 10

        self.alarm_set = False
        self.alarm_ringing = False
    # changes 24 and 12 hour clock display
    def change_display(self):
        self.display = not(self.display)
        set_display_clock_hour()
    # increament and decreament hour for clock purposes
    def increament_hour(self):
        if self.hour >= 23:
            self.hour = 0
        else:
            self.hour = self.hour + 1
        set_display_clock_hour()
    def decreament_hour(self):
        if self.hour <= 0:
            self.hour = 23
        else:
            self.hour = self.hour - 1
        set_display_clock_hour()
    # increament and decreament minute for clock purposes
    def increament_minute(self):
        if self.minute >= 59:
            self.minute = 0
        else:
            self.minute = self.minute + 1
        set_display_clock_hour()
    def decreament_minute(self):
        if self.minute <= 0:
            self.minute = 59
        else:
            self.minute = self.minute - 1
        set_display_clock_hour()
    # increaments and decreaments hour for alarm
    def increament_alarm_hour(self):
        if self.alarm_hour == 23:
            self.alarm_hour = 0
        else:
            self.alarm_hour = self.alarm_hour + 1
        set_alarm_hour()
    def decreament_alarm_hour(self):
        if self.alarm_hour == 0:
            self.alarm_hour = 23
        else:
            self.alarm_hour = self.alarm_hour - 1
        set_alarm_hour()
    # increaments alarm minute, has t variable for use of snooze button
    def increament_alarm_minute(self, t):
        if self.alarm_minute + t >= 60:
            self.alarm_minute = self.alarm.minute + t - 60
            self.increament_alarm_hour()
        else:
            self.alarm_minute = self.alarm_minute + t
        set_alarm_hour()
    # decreaments alarm
    def decreament_alarm_minute(self):
        if self.alarm_minute <= 0:
            self.alarm_minute = 59
        else:
            self.alarm_minute = self.alarm_minute - 1
        set_alarm_hour()
    # toggles alarm set/not set
    def toggle_alarm(self):
        if self.alarm_ringing == True:
            self.alarm_ringing = False
            self.alarm_set = False
            fm_radio.revert_alarm()
        else:
            self.alarm_set = not(self.alarm_set)
    # snoozes alarm if it is ringing
    def snooze(self):
        if self.alarm_ringing == True:
            self.alarm_ringing = False
            fm_radio.revert_alarm()
            self.increament_alarm_minute(5)
            set_alarm_hour()
    # keep simple until max/min values of volume discovered
    def increament_volume(self):
        self.volume += 1
    def decreament_volume(self):
        self.volume -= 1
    # increament minute for clock timer only
    def increase_minute(self):
        if self.minute >= 59:
            self.minute = 0
            self.increament_hour()
        else:
            self.minute = self.minute + 1
            set_display_clock_hour()
        if self.hour == self.alarm_hour and self.minute == self.alarm_minute and self.alarm_set == True:
            fm_radio.alarm()
            self.alarm_ringing = True
    # clock timer that increases minute every minute
    # does not work will this function
    


        

class Radio:
    
    def __init__( self, NewFrequency, NewVolume, NewMute ):

#
# set the initial values of the radio
#
        self.Volume = 2
        self.Frequency = 88
        self.Mute = False
        self.place_holder = 102

        self.save_Frequency = 88
        self.save_Volume = 2

        def alarm():
            self.save_Frequency = self.Frequency
            self.save_Volume = self.Volume
            self.SetVolume(clock.alarm_volume)
            self.SetMute(False)
            self.SetFrequency(88)

        def revert_alarm():
            self.SetMute(True)
            self.SetVolume(self.save_Volume)
            self.SetFrequency(self.save_Frequency)


#
# Update the values with the ones passed in the initialization code
#
        self.SetVolume( NewVolume )
        self.SetFrequency( NewFrequency )
        self.SetMute( NewMute )
        
      
# Initialize I/O pins associated with the radio's I2C interface

        self.i2c_sda = Pin(26)
        self.i2c_scl = Pin(27)

#
# I2C Device ID can be 0 or 1. It must match the wiring. 
#
# The radio is connected to device number 1 of the I2C device
#
        self.i2c_device = 1 
        self.i2c_device_address = 0x10

#
# Array used to configure the radio
#
        self.Settings = bytearray( 8 )


        self.radio_i2c = I2C( self.i2c_device, scl=self.i2c_scl, sda=self.i2c_sda, freq=200000)
        self.ProgramRadio()

    def SetVolume( self, NewVolume ):
#
# Conver t the string into a integer
#
        try:
            NewVolume = int( NewVolume )
            
        except:
            return( False )
        
#
# Validate the type and range check the volume
#
        if ( not isinstance( NewVolume, int )):
            return( False )
        
        if (( NewVolume < 0 ) or ( NewVolume >= 16 )):
            return( False )

        self.Volume = NewVolume
        return( True )

    def increase_place_holder(self):
        self.place_holder += 0.1
        if self.place_holder > 107.3:
            self.place_holder = 107.3
    def decrease_place_holder(self):
        self.place_holder -= 0.1
        if self.place_holder < 88.0:
            self.place_holder = 88.0
    def set_place_holder(self):
        if (self.SetFrequency(self.place_holder)) == True:
            self.ProgramRadio()

    def SetFrequency( self, NewFrequency ):
#
# Convert the string into a floating point value
#
        try:
            NewFrequency = float( NewFrequency )
            
        except:
            return( False )
#
# validate the type and range check the frequency
#
        if ( not ( isinstance( NewFrequency, float ))):
            return( False )
 
        if (( NewFrequency < 88.0 ) or ( NewFrequency > 108.0 )):
            return( False )

        self.Frequency = NewFrequency
        return( True )
        
    def SetMute( self, NewMute ):
        
        try:
            self.Mute = bool( int( NewMute ))
            
        except:
            return( False )
        
        return( True )

#
# convert the frequency to 10 bit value for the radio chip
#
    def ComputeChannelSetting( self, Frequency ):
        Frequency = int( Frequency * 10 ) - 870
        
        ByteCode = bytearray( 2 )
#
# split the 10 bits into 2 bytes
#
        ByteCode[0] = ( Frequency >> 2 ) & 0xFF
        ByteCode[1] = (( Frequency & 0x03 ) << 6 ) & 0xC0
        return( ByteCode )

#
# Configure the settings array with the mute, frequency and volume settings
#
    def UpdateSettings( self ):
        
        if ( self.Mute ):
            self.Settings[0] = 0x80
        else:
            self.Settings[0] = 0xC0
  
        self.Settings[1] = 0x09 | 0x04
        self.Settings[2:3] = self.ComputeChannelSetting( self.Frequency )
        self.Settings[3] = self.Settings[3] | 0x10
        self.Settings[4] = 0x04
        self.Settings[5] = 0x00
        self.Settings[6] = 0x84
        self.Settings[7] = 0x80 + self.Volume

#        
# Update the settings array and transmitt it to the radio
#
    def ProgramRadio( self ):

        self.UpdateSettings()
        self.radio_i2c.writeto( self.i2c_device_address, self.Settings )

#
# Extract the settings from the radio registers
#
    def GetSettings( self ):
#        
# Need to read the entire register space. This is allow access to the mute and volume settings
# After and address of 255 the 
#
        self.RadioStatus = self.radio_i2c.readfrom( self.i2c_device_address, 256 )

        if (( self.RadioStatus[0xF0] & 0x40 ) != 0x00 ):
            MuteStatus = False
        else:
            MuteStatus = True
            
        VolumeStatus = self.RadioStatus[0xF7] & 0x0F
 
 #
 # Convert the frequency 10 bit count into actual frequency in Mhz
 #
        FrequencyStatus = (( self.RadioStatus[0x00] & 0x03 ) << 8 ) | ( self.RadioStatus[0x01] & 0xFF )
        FrequencyStatus = ( FrequencyStatus * 0.1 ) + 87.0
        
        if (( self.RadioStatus[0x00] & 0x04 ) != 0x00 ):
            StereoStatus = True
        else:
            StereoStatus = False
        
        return( MuteStatus, VolumeStatus, FrequencyStatus, StereoStatus )

#
# initialize the FM radio
#
fm_radio = Radio( 101.9, 2, False )
clock = Clock()
clock_tim.init(period = 60, mode=Timer.PERIODIC, callback=increase_timer)
while ( True ):

 # clear buffer
    oled.fill(0)

    # display on OLED, need to test using OLED
    if clock.alarm_ringing == True:
        oled.text("ALARMING", ,)
    elif mode == 1: # clock
        if clock.display == True:
            if clock.alarm_set == True: # 24 hour, alarm set
                oled.text("%d:%d" % (clock.hour, clock.minute) ,,)
                oled.rect()
            else: # 24 hour
                oled.text("%d:%d" % (clock.hour, clock.minute) ,,)
        else: 
            if clock.alarm_set == True: # 12 hour, alarm set
                oled.text("%d:%d %s" % (display_clock_hour, clock.minute, display_time_half),,)
                oled.rect()
            else: # 12 hour
                oled.text("%d:%d %s" % (display_clock_hour, clock.minute, display_time_half),,)
            
    elif mode == 2: # edit hour
        if clock.display == True:
            if clock.alarm_set == True: # 24 hour, alarm set
                oled.text("%d:%d" % (clock.hour, clock.minute) ,,)
            else: # 24 hour
                oled.text("%d:%d" % (clock.hour, clock.minute) ,,)
                oled.rect()
        else: 
            if clock.alarm_set == True: # 12 hour, alarm set
                oled.text("%d:%d %s" % (display_clock_hour, clock.minute, display_time_half),,)
            else: # 12 hour
                oled.text("%d:%d %s" % (display_clock_hour, clock.minute, display_time_half),,)
                oled.rect()
    elif mode == 3: # edit minute
        if clock.display == True:
            if clock.alarm_set == True: # 24 hour, alarm set
                oled.text("%d:%d" % (clock.hour, clock.minute) ,,)
            else: # 24 hour
                oled.text("%d:%d" % (clock.hour, clock.minute) ,,)
        else: 
            if clock.alarm_set == True: # 12 hour, alarm set
                oled.text("%d:%d %s" % (display_clock_hour, clock.minute, display_time_half),,)
            else: # 12 hour
                oled.text("%d:%d %s" % (display_clock_hour, clock.minute, display_time_half),,)
                oled.rect()
    elif mode == 4: # edit alarm hour
        if clock.display == True:
            if clock.alarm_set == True: # 24 hour, alarm set
                oled.text("%d:%d" % (clock.alarm_hour, clock.alarm_minute) ,,)
                oled.fill_rect()
            else: # 24 hour
                oled.text("%d:%d" % (clock.alarm_hour, clock.alarm_minute) ,,)
        else: 
            if clock.alarm_set == True: # 12 hour, alarm set
                oled.text("%d:%d %s" % (display_alarm_hour, clock.minute, display_alarm_half),,)
                oled.rect()
            else: # 12 hour
                oled.text("%d:%d %s" % (display_alarm_hour, clock.minute, display_alarm_half),,)
    elif mode == 5: # edit alarm minute
        if clock.display == True:
            if clock.alarm_set == True: # 24 hour, alarm set
                oled.text("%d:%d" % (clock.alarm_hour, clock.alarm_minute) ,,)
                oled.rect()
            else: # 24 hour
                oled.text("%d:%d" % (clock.alarm_hour, clock.alarm_minute) ,,)
        else: 
            if clock.alarm_set == True: # 12 hour, alarm set
                oled.text("%d:%d %s" % (display_alarm_hour, clock.minute, display_alarm_half),,)
                oled.rect()
            else: # 12 hour
                oled.text("%d:%d %s" % (display_alarm_hour, clock.minute, display_alarm_half),,)
    else: # radio mode
        oled.text("%s %f" % "FM" % fm_radio.Frequency,,)

        oled.text("%f" % fm_radio.place_holder,,)
    oled.show()
    
    print("")
    print( "ECE 299 FM Radio Demo Menu" );
    print("")
    print( "1 - change radio frequency" )
    print( "2 - change volume level" )
    print( "3 - mute audio" )
    print( "4 - read current settings" )
    
    select = input( "Enter menu number > " )

#
# Set radio frequency
#
    if ( select == "1" ):
        Frequency = input( "Enter frequncy in Mhz ( IE 100.3 ) > " )

        if ( fm_radio.SetFrequency( Frequency ) == True ):
            fm_radio.ProgramRadio()
        else:
            print( "Invalid frequency( Range is 88.0 to 108.0 )" )

#
# Set volume level of radio
#
    elif ( select == "2" ):
        Volume = input( "Enter volume level ( 0 to 15, 15 is loud ) > " )
        
        if ( fm_radio.SetVolume( Volume ) == True ):
            fm_radio.ProgramRadio()
        else:
            print( "Invalid volume level( Range is 0 to 15 )" )
        
#        
# Enable mute of radio       
#        
    elif( select == "3" ):
        Mute = input( "Enter mute ( 1 for Mute, 0 for audio ) > " )
        
        if ( fm_radio.SetMute( Mute ) == True ):
            fm_radio.ProgramRadio()
        else:
            print( "Invalid mute setting" )

#
# Display radio current settings
#
    elif( select == "4" ):
        Settings = fm_radio.GetSettings()

        print( Settings )
        print("")
        print("Radio Status")
        print("")

        print( "Mute: ", end="" )
        if ( Settings[0] == True ):
            print( "enabled" )
        else:
            print( "disabled" )

        print( "Volume: %d" % Settings[1] )

        print( "Frequency: %5.1f" % Settings[2] )

        print( "Mode: ", end="" )
        if ( Settings[3] == True ):
            print( "stereo" )
        else:
            print( "mono" )


    else:
        print( "Invalid menu option" )

        


