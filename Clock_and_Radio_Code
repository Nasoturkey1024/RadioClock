from machine import Pin, I2C, Timer, SPI
from ssd1306 import SSD1306_SPI
import time
# todo
# implement rotary encoder
# solder speaker and test

# Buttons for clock functionality

# button 1, enters/exits time editing
enter_save_time = machine.Pin(0, machine.Pin.IN, machine.Pin.PULL_UP) # Tested
# button 4?, switches 12 hour and 24 hour display
switch_time_12and24 = machine.Pin(1, machine.Pin.IN, machine.Pin.PULL_UP) # tested
# button 5, enters/exits alarm editing
enter_save_alarm = machine.Pin(2, machine.Pin.IN, machine.Pin.PULL_UP) # tested
# button 6, sets/un-sets alarm and turns off if ringing
turn_alarm_off_on = machine.Pin(3, machine.Pin.IN, machine.Pin.PULL_UP) # tested

# Universal buttons
# button 7, universal increase depending on mode
value_increase = machine.Pin(4, machine.Pin.IN, machine.Pin.PULL_UP) # tested
# button 2, Universal decrease depending on mode
value_decrease = machine.Pin(6, machine.Pin.IN, machine.Pin.PULL_UP) # tested
# button 3, switches between clock and radio display
switch_display = machine.Pin(7, machine.Pin.IN, machine.Pin.PULL_UP) # tested

# Radio button/dial
# button 8, mutes/un-mutes radio
radio_on_off = machine.Pin(8, machine.Pin.IN, machine.Pin.PULL_UP) # tested
# snoozes alarm/ saves frequency
dial_button = machine.Pin(12, machine.Pin.IN, machine.Pin.PULL_UP)
rotaryA = machine.Pin(15, machine.Pin.IN, machine.Pin.PULL_UP)
rotaryB = machine.Pin(14, machine.Pin.IN, machine.Pin.PULL_UP)

# mode decides what the universal increament/decreament do as well as display
mode = 1
# timer for use with debouncing
tim = machine.Timer()
clock_tim = machine.Timer()
# timer for use with clock
past_A = rotaryA.value()

screen_width = 128 # number of columns
screen_height = 64 # number of rows

spi_sck = Pin(18)
spi_sda = Pin(19)
spi_res = Pin(21)
spi_dc  = Pin(20)
spi_cs  = Pin(17)

SPI_DEVICE = 0
oled_spi = SPI( SPI_DEVICE, baudrate= 100000, sck= spi_sck, mosi= spi_sda )
oled = SSD1306_SPI( screen_width, screen_height, oled_spi, spi_dc, spi_res, spi_cs, True )

display_hour = 12
display_half = "AM"
display_alarm_hour = 7
display_alarm_half = "AM"
# updates clock display for 12 hour clock
def update_display_time():
    global display_hour, display_half
    if clock.hour == 0:
        display_hour = 12
        display_half = "AM"
    elif clock.hour < 12:
        display_hour = clock.hour
        display_half = "AM"
    elif clock.hour == 12:
        display_hour = 12
        display_half = "PM"
    else:
        display_hour = clock.hour - 12
        display_half = "PM"
# updates the alarm display for 12 hour clock
def display_alarm():
    global display_alarm_hour, display_alarm_half
    if clock.alarm_hour == 0:
        display_alarm_hour = 12
        display_alarm_half = "AM"
    elif clock.alarm_hour < 12:
        display_alarm_hour = clock.alarm_hour 
        display_alarm_half = "AM"
    elif clock.alarm_hour == 12:
        display_alarm_hour = 12
        display_alarm_half = "PM"
    else:
        display_alarm_hour = clock.alarm_hour - 12
        display_alarm_half = "PM"
# enters/exits edit clock hour/minute
def enter_save(t):
    global mode
    if enter_save_time.value() == 0:
        if mode == 2:
            change_mode(3)
        elif mode == 3:
            change_mode(1)
        else:
            change_mode(2)
# changes mode and updates OLED display
def change_mode(t):
    global mode
    if t > 7 or t < 1:
        t = 1
    if t == 1: # clock mode
        mode = 1
        oled.fill(0)
        if clock.display == False:
            oled.text("{:0=2} : {:0=2} {}".format(display_hour, clock.minute, display_half), 28, 32)
            if clock.alarm_set == True:
                oled.text("Alarm {:0=2} : {:0=2} {}".format(display_alarm_hour, clock.alarm_minute, display_alarm_half),0,10)
        else:
            oled.text("{:0=2} : {:0=2}".format(clock.hour, clock.minute),39,32)
            if clock.alarm_set == True:
                oled.text("Alarm {:0=2} : {:0=2}".format(clock.alarm_hour, clock.alarm_minute),0,10)
        oled.text("Alarm Volume {:0=2}".format(fm_radio.alarm_volume), 4, 56)
        oled.show()
    elif t == 2: # edit clock hour mode
        mode = 2
        if clock.display == False:
            oled.fill(0)
            oled.text("Set Hour",35,0)
            oled.text("{:0=2} {}".format(display_hour, display_half), 45, 9)
            oled.text("{:0=2} : {:0=2} {}".format(display_hour, clock.minute, display_half),28,32)
        else:
            oled.fill(0)
            oled.text("Set Hour",35,0)
            oled.text("{:0=2}".format(clock.hour), 56, 9)
            oled.text("{:0=2} : {:0=2}".format(clock.hour, clock.minute),39,32)
        oled.show()
    elif t == 3: # edit clock minute mode
        mode = 3
        if clock.display == False:
            oled.fill(0)
            oled.text("Set Minute",25,0)
            oled.text("{:0=2}".format(clock.minute), 56, 9)
            oled.text("{:0=2} : {:0=2} {}".format(display_hour, clock.minute, display_half),28,32)
        else:
            oled.fill(0)
            oled.text("Set Minute",25,0)
            oled.text("{:0=2}".format(clock.minute), 56, 9)
            oled.text("{:0=2} : {:0=2}".format(clock.hour, clock.minute),39,32)
        oled.show()
    elif t == 4: # edit alarm hour mode
        mode = 4
        if clock.display == False:
            oled.fill(0)
            oled.text("Set Alarm Hour",10,0)
            oled.text("{:0=2} {}".format(display_alarm_hour, display_alarm_half), 42, 9)
            oled.text("{:0=2} : {:0=2} {}".format(display_hour, clock.minute, display_half),28,32)
        else:
            oled.fill(0)
            oled.text("Set Alarm Hour",10,0)
            oled.text("{:0=2}".format(clock.alarm_hour), 58, 9)
            oled.text("{:0=2} : {:0=2}".format(clock.hour, clock.minute),39,32)
        oled.show()
    elif t == 5: # edit alarm minute mode
        mode = 5
        if clock.display == False:
            oled.fill(0)
            oled.text("Set Alarm Minute",0,0)
            oled.text("{:0=2}".format(clock.alarm_minute), 55, 9)
            oled.text("{:0=2} : {:0=2} {}".format(display_hour, clock.minute, display_half),28,32)
        else:
            oled.fill(0)
            oled.text("Set Alarm Minute",0,0)
            oled.text("{:0=2}".format(clock.alarm_minute), 55, 9)
            oled.text("{:0=2} : {:0=2}".format(clock.hour, clock.minute),35,32)
        oled.show()
    elif t == 6: # radio mode
        mode = 6
        oled.fill(0)
        oled.text("Set Frequency",15,0)
        oled.text("%.1f" % (fm_radio.whole_frequency + fm_radio.decimal_frequency/10), 45, 9)
        oled.text("%.1f MHz" % fm_radio.Frequency, 35, 32)
        oled.text(" Volume: {:0=2}".format(fm_radio.Volume),20 ,56)
        oled.show()
    else:
        mode = 7
        oled.fill(0)
        oled.text("ALARMING!!!", 25, 32)
        oled.show()
# changes display from 12 hour to 24 hour and vice versa     
def change_display(t):
    if switch_time_12and24.value() == 0:
        clock.change_display()
# enters modes that allow editing of alarm
def enter_alarm_edit(t):
    global mode
    if enter_save_alarm.value() == 0:
        if mode == 4:
            change_mode(5)
        elif mode == 5:
            change_mode(1)
        else:
            change_mode(4)
# switches between clock and radio mode
def switch_clock_radio_display(t):
    global mode
    if switch_display.value() == 0:
        if mode == 6:
            change_mode(1)
        else:
            change_mode(6)
# sets/unsets alarm
def toggle_alarm(t):
    if turn_alarm_off_on.value() == 0:
        clock.toggle_alarm()
# toggles mute of radio   
def turn_radio_on_off(t):
    if radio_on_off.value() == 0:
        fm_radio.toggle_mute()
# _increaments multiple values depending on current mode
def increament(t):
    global mode
    if value_increase.value() == 0: # clock mode
        if mode == 1:
            if fm_radio.alarm_volume == 15:
                fm_radio.alarm_volume = 15
            else:
                fm_radio.alarm_volume += 1
            change_mode(1)
        elif mode == 2: # edit hour
            clock.increament_hour()
        elif mode == 3: # edit minute
            clock.increament_minute()
        elif mode == 4: # edit alarm hour
            clock.increament_alarm_hour()
        elif mode == 5: # edit alarm minute
            clock.increament_alarm_minute(1)
        elif mode == 6: # radio mode
            if fm_radio.Volume >= 15:
                fm_radio.SetVolume(15)
            else:
                fm_radio.SetVolume(fm_radio.Volume + 1)
            change_mode(6)
            fm_radio.ProgramRadio()
# decreaments multiple values depending on current mode
def decreament(t):
    global mode
    if value_decrease.value() == 0:
        if mode == 1: # clock
            if fm_radio.alarm_volume <= 0:
                fm_radio.SetVolume(0)
            else:
                fm_radio.alarm_volume -= 1
                change_mode(1)          
        elif mode == 2: # edit hour
            clock.decreament_hour()
        elif mode == 3: # edit minute
            clock.decreament_minute()
        elif mode == 4: # edit alarm hour
            clock.decreament_alarm_hour()
        elif mode == 5: # edit alarm minute
            clock.decreament_alarm_minute()
        elif mode == 6: # radio
            if fm_radio.Volume <= 0:
                fm_radio.SetVolume(0)
            else:
                fm_radio.SetVolume(fm_radio.Volume - 1)
            change_mode(6)
            fm_radio.ProgramRadio()
# sets placeholder frequency as current frequency    
def set_new_frequency(t):
    global mode
    if dial_button.value() == 0:
        if clock.alarm_ringing == True:
            clock.snooze()
        else:
            fm_radio.set_place_holder()
            if mode == 6:
                change_mode(6)
# increases/decreases placeholder frequency depending on rotation
def change_in_encoder(t): # 11 -> 01 -> 00 -> 10 -> 11 - > 01
    global mode, past_A, past_B
    if past_A == rotaryB.value():
        fm_radio.decrease_place_holder()
        past_A = rotaryA.value()
    else:
        fm_radio.increase_place_holder()
    past_A = rotaryA.value()
    if mode == 6:
        change_mode(6)
    
# called by clock_timer to increament minute each minute
def periodic_increase(t):
    clock.increase_minute()
            
class Clock:
    global mode
    def __init__(self):
        
        self.hour = 0 # current hour 
        self.minute = 0 # current minute
        self.display = False # sets clock as 12 hour time by default

        self.alarm_hour = 7
        self.alarm_minute = 30

        self.alarm_set = False
        self.alarm_ringing = False
        
    # changes 24 and 12 hour clock display
    def change_display(self): # tested
        self.display = not(self.display)
        if mode == 1:
            change_mode(1)
        elif mode == 2:
            change_mode(2)
        elif mode == 3:
            change_mode(3)
        elif mode == 4:
            change_mode(4)
        elif mode == 5:
            change_mode(5)
    # increament hour for clock purposes
    def increament_hour(self): # tested
        if self.hour >= 23:
            self.hour = 0
        else:
            self.hour = self.hour + 1
        update_display_time()
        change_mode(2)
    # decreament hour for clock purposes
    def decreament_hour(self): # tested
        if self.hour <= 0:
            self.hour = 23
        else:
            self.hour = self.hour - 1
        update_display_time()
        change_mode(2)
    # increament minute for clock purposes
    def increament_minute(self): # tested
        if self.minute >= 59:
            self.minute = 0
        else:
            self.minute = self.minute + 1
        update_display_time()
        change_mode(3)
    # decreament minute for clock purposes
    def decreament_minute(self): # tested
        if self.minute <= 0:
            self.minute = 59
        else:
            self.minute = self.minute - 1
        update_display_time()
        change_mode(3)
    # increaments hour for alarm
    def increament_alarm_hour(self): # tested
        if self.alarm_hour == 23:
            self.alarm_hour = 0
        else:
            self.alarm_hour = self.alarm_hour + 1
        display_alarm()
        change_mode(4)
    # decreaments hour for alarm
    def decreament_alarm_hour(self): # tested
        if self.alarm_hour <= 0:
            self.alarm_hour = 23
        else:
            self.alarm_hour = self.alarm_hour - 1
        display_alarm()
        change_mode(4)
    # increaments alarm minute, has t variable for use of snooze button
    def increament_alarm_minute(self, t): # tested
        if self.alarm_minute + t >= 60:
            self.alarm_minute = self.alarm_minute + t - 60
            if t == 10: # only increaments alarm hour if snooze is used
                self.increament_alarm_hour()
        else:
            self.alarm_minute = self.alarm_minute + t
        display_alarm()
        if t == 1:
            change_mode(5)
    # decreaments alarm minute
    def decreament_alarm_minute(self): # tested
        if self.alarm_minute <= 0:
            self.alarm_minute = 59
        else:
            self.alarm_minute = self.alarm_minute - 1
        display_alarm()
        change_mode(5)
    # toggles alarm set/not set
    def toggle_alarm(self): # tested
        if self.alarm_ringing == True:
            self.alarm_ringing = False
            fm_radio.stop_alarm()
            change_mode(1)
        else:
            self.alarm_set = not(self.alarm_set)
            if mode == 1:
                change_mode(1)
    # snoozes alarm if it is ringing
    def snooze(self): # tested
        if self.alarm_ringing == True:
            self.alarm_ringing = False
            fm_radio.stop_alarm()
            self.increament_alarm_minute(10)
            change_mode(1)
            
    # increament hour for clock timer only
    def increase_hour(self):
        if self.hour >= 23:
            self.hour = 0
        else:
            self.hour += 1
    # increaments clock minute for clock timer only, is able to increase clock hour
    def increase_minute(self): # tested
        if self.minute >= 59:
            self.minute = 0
            self.increase_hour()
        else:
            self.minute = self.minute + 1
        if self.hour == self.alarm_hour and self.minute == self.alarm_minute and self.alarm_set == True:
            self.alarm_ringing = True
            fm_radio.play_alarm()
            change_mode(7)
        elif mode == 1:
            change_mode(1)
        elif mode == 2:
            change_mode(2)
        elif mode == 3:
            change_mode(3)
        elif mode == 4:
            change_mode(4)
        elif mode == 5:
            change_mode(5)
            
def increament_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=increament)
# debounces universal decreament
def decreament_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=decreament)
# debounces enter/save time for clock
def enter_save_time_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=enter_save)

# debounces for all clock buttons
def switch_time_12and24_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=change_display)
def switch_display_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=switch_clock_radio_display)
def enter_alarm_edit_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=enter_alarm_edit)
def toggle_alarm_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=toggle_alarm)

def toggle_radio_off_on_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=turn_radio_on_off)
def dial_button_debounce(t):
    tim.init(freq=50, mode=Timer.ONE_SHOT, callback=set_new_frequency)
def rotary_debounce(t):
    tim.init(freq=400, mode=Timer.ONE_SHOT, callback=change_in_encoder)
# interrupt handlers for all clock buttons
value_increase.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=increament_debounce)
value_decrease.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=decreament_debounce)
enter_save_time.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=enter_save_time_debounce)
switch_time_12and24.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=switch_time_12and24_debounce)
switch_display.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=switch_display_debounce)
enter_save_alarm.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=enter_alarm_edit_debounce)
turn_alarm_off_on.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=toggle_alarm_debounce)
# interrupt handler for radio buttons/encoders
radio_on_off.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=toggle_radio_off_on_debounce)
dial_button.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=dial_button_debounce)
rotaryA.irq(trigger=machine.Pin.IRQ_FALLING or machine.Pin.IRQ_RISING, handler=rotary_debounce)

class Radio:
    
    def __init__( self, NewFrequency, NewVolume, NewMute ):

#
# set the initial values of the radio
        # Basic radio parameters
        self.Volume = 2
        self.Frequency = 88
        self.Mute = False
        # used to calculate frequency when set
        self.whole_frequency = 88
        self.decimal_frequency = 0
        # alarm values
        self.alarm_volume = 10
        self.alarm_frequency = 88
        # saved values for when alarm is played so previous settings can be reverted
        self.save_volume = 2
        self.save_frequency = 88
        # stops what is playing and switches to designated alarm radio

# Update the values with the ones passed in the initialization code
#
        self.SetVolume( NewVolume )
        self.SetFrequency( NewFrequency )
        self.SetMute( NewMute )
        
      
# Initialize I/O pins associated with the radio's I2C interface

        self.i2c_sda = Pin(26)
        self.i2c_scl = Pin(27)

#
# I2C Device ID can be 0 or 1. It must match the wiring. 
#
# The radio is connected to device number 1 of the I2C device
#
        self.i2c_device = 1 
        self.i2c_device_address = 0x10

#
# Array used to configure the radio
#
        self.Settings = bytearray( 12 )


        self.radio_i2c = I2C( self.i2c_device, scl=self.i2c_scl, sda=self.i2c_sda, freq=200000)
        self.ProgramRadio()
    # stops radio and plays alarm instead
    def play_alarm(self):
        self.save_volume = self.Volume
        self.save_frequency = self.Frequency
            
        self.SetMute(False)
        self.SetVolume(self.alarm_volume)
        self.SetFrequency(self.alarm_frequency)
        self.ProgramRadio()
        # reverts changes after alarm is stopped
    # stops alarm and reverts radio settings
    def stop_alarm(self):
        self.SetVolume(self.save_volume)
        self.SetFrequency(self.save_frequency)
        self.SetMute(True)
            
        self.ProgramRadio()
    # toggles mute of radio, if alarm ringing then stops alarm
    def toggle_mute(self):
        if clock.alarm_ringing == True:
            self.stop_alarm()
            clock.alarm_ringing = False
            change_mode(1)
        else:
            self.SetMute(not(self.Mute))
            self.ProgramRadio()
            
    def SetVolume( self, NewVolume ):
#
# Conver t the string into a integer
#
        try:
            NewVolume = int( NewVolume )
            
        except:
            return( False )
        
#
# Validate the type and range check the volume
#
        if ( not isinstance( NewVolume, int )):
            return( False )
        
        if (( NewVolume < 0 ) or ( NewVolume >= 16 )):
            return( False )

        self.Volume = NewVolume
        return( True )
    # increases placeholder_ frequency
    def increase_place_holder(self):
        if self.whole_frequency == 108:
            self.whole_frequency = 108
            self.decimal_frequency = 0
        elif self.decimal_frequency >= 9:
            self.decimal_frequency = 0
            self.whole_frequency += 1
        else:
            self.decimal_frequency += 1
    # decreases placeholder frequency
    def decrease_place_holder(self):
        if self.whole_frequency <= 88:
            self.whole_frequecy = 88
            self.decimal_frequency = 0
        elif self.decimal_frequency <= 0:
            self.decimal_frequency = 9
            self.whole_frequency -= 1
        else:
            self.decimal_frequency -= 1
    # sets current placeholder frequency as real frequency
    def set_place_holder(self):
        if (self.SetFrequency(self.whole_frequency + self.decimal_frequency/10)) == True:
            self.ProgramRadio()

    def SetFrequency( self, NewFrequency ):
#
# Convert the string into a floating point value
#
        try:
            NewFrequency = float( NewFrequency )
            
        except:
            return( False )
#
# validate the type and range check the frequency
#
        if ( not ( isinstance( NewFrequency, float ))):
            return( False )
 
        if (( NewFrequency < 88.0 ) or ( NewFrequency > 108.0 )):
            return( False )

        self.Frequency = NewFrequency
        return( True )
        
    def SetMute( self, NewMute ):
        
        try:
            self.Mute = bool( int( NewMute ))
            
        except:
            return( False )
        
        return( True )

#
# convert the frequency to 10 bit value for the radio chip
#
    def ComputeChannelSetting( self, Frequency ):
        Frequency = int( Frequency * 10 ) - 870
        
        ByteCode = bytearray( 2 )
#
# split the 10 bits into 2 bytes
#
        ByteCode[0] = ( Frequency >> 2 ) & 0xFF
        ByteCode[1] = (( Frequency & 0x03 ) << 6 ) & 0xC0
        return( ByteCode )

#
# Configure the settings array with the mute, frequency and volume settings
#
    def UpdateSettings( self ):
        
        if ( self.Mute ):
            self.Settings[0] = 0x80
        else:
            self.Settings[0] = 0xC0
  
        self.Settings[1] = 0x09 | 0x04
        self.Settings[2:3] = self.ComputeChannelSetting( self.Frequency )
        self.Settings[3] = self.Settings[3] | 0x10
        self.Settings[4] = 0x04
        self.Settings[5] = 0x00
        self.Settings[6] = 0x84
        self.Settings[7] = 0x80 + self.Volume
        # Hunter was here. Thank you for the code fix, Hunter
        self.Settings[8] = 0x00
        self.Settings[9] = 0x00
        self.Settings[10] = 0x42
        self.Settings[11] = 0x02

#        
# Update the settings array and transmitt it to the radio
#
    def ProgramRadio( self ):

        self.UpdateSettings()
        self.radio_i2c.writeto( self.i2c_device_address, self.Settings )

#
# Extract the settings from the radio registers
#
    def GetSettings( self ):
#        
# Need to read the entire register space. This is allow access to the mute and volume settings
# After and address of 255 the 
#
        self.RadioStatus = self.radio_i2c.readfrom( self.i2c_device_address, 256 )

        if (( self.RadioStatus[0xF0] & 0x40 ) != 0x00 ):
            MuteStatus = False
        else:
            MuteStatus = True
            
        VolumeStatus = self.RadioStatus[0xF7] & 0x0F
 
 #
 # Convert the frequency 10 bit count into actual frequency in Mhz
 #
        FrequencyStatus = (( self.RadioStatus[0x00] & 0x03 ) << 8 ) | ( self.RadioStatus[0x01] & 0xFF )
        FrequencyStatus = ( FrequencyStatus * 0.1 ) + 87.0
        
        if (( self.RadioStatus[0x00] & 0x04 ) != 0x00 ):
            StereoStatus = True
        else:
            StereoStatus = False
        
        return( MuteStatus, VolumeStatus, FrequencyStatus, StereoStatus )

clock = Clock()
fm_radio = Radio(101 + 9/10, 5, True)
clock_tim.init(period = 60000, mode=Timer.PERIODIC, callback=periodic_increase)
change_mode(1)


while True:
    pass

